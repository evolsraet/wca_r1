# Overview
위카옥션 v2는 중고차 경매 플랫폼으로, 개인 판매자와 딜러를 연결하는 온라인 경매 시스템입니다. 현재 기존 개발자의 인수인계 없이 남겨진 프로젝트로, 보안 취약점과 품질 이슈가 다수 발견되어 전면적인 점검과 개선이 필요한 상황입니다. 이 플랫폼은 차량 정보 조회, 경매 진행, 입찰, 결제, 탁송까지 중고차 거래의 전 과정을 온라인으로 처리합니다.

# Core Features
## 경매 시스템
- **차량 등록 및 조회**: 판매자가 차량번호와 소유자명으로 차량 정보를 조회하고 판매 신청
- **경매 진행**: 진단 → 경매 시작 → 입찰 → 낙찰 → 결제 → 탁송 → 완료의 라이프사이클 관리
- **입찰 관리**: 딜러들의 실시간 입찰과 최고가 갱신
- **알림 시스템**: 상태 변경 시 SMS/이메일 자동 발송

## 회원 관리
- **다중 회원 타입**: 일반 회원(판매자), 딜러(구매자), 관리자
- **소셜 로그인**: 카카오, 네이버 OAuth 연동
- **회원 승인/제재**: 가입 승인 및 경고/정지 시스템

## 결제 시스템
- **나이스페이 연동**: 가상계좌, 신용카드 결제
- **에스크로**: 차량대금 안전거래
- **수수료 관리**: 성공수수료 자동 계산 및 청구

## 외부 API 연동
- **나이스DNR**: 차량 기본정보 조회
- **카머스**: 차량 시세 정보
- **Aligo**: SMS/알림톡 발송
- **본인인증**: 휴대폰 본인인증

## 게시판 시스템
- **다중 게시판**: 공지사항, 리뷰, 문의, 클레임
- **권한별 작성**: 리뷰는 판매자, 클레임은 구매자만 작성 가능
- **댓글 기능**: 실시간 댓글 작성 및 관리

# User Experience
## 사용자 페르소나
- **개인 판매자**: 차량을 팔고자 하는 일반인, 간편한 판매 절차를 원함
- **딜러**: 중고차 매입 업체, 다수의 차량을 효율적으로 구매하고자 함
- **관리자**: 플랫폼 운영자, 경매 승인 및 회원 관리

## 주요 사용자 플로우
1. **판매 플로우**: 차량조회 → 본인인증 → 판매신청 → 진단대기 → 경매진행 → 낙찰자선택 → 대금수령 → 탁송/명의이전
2. **구매 플로우**: 회원가입(딜러) → 경매목록확인 → 입찰 → 낙찰 → 결제 → 탁송지입력 → 차량인수
3. **관리 플로우**: 회원승인 → 경매승인 → 진단결과등록 → 상태관리 → 분쟁조정

## UI/UX 고려사항
- Blade + Alpine.js 기반 서버사이드 렌더링
- Bootstrap 5.3 반응형 디자인
- 실시간 입찰 현황 표시
- 직관적인 상태 표시 (진행중/종료/취소 등)

# Technical Architecture
## 시스템 구성요소
- **백엔드**: Laravel 10 (PHP 8.2)
- **프론트엔드**: Blade 템플릿 + Alpine.js + Bootstrap 5.3
- **데이터베이스**: MySQL 8.0
- **캐시/큐**: Redis
- **개발환경**: Docker (Laravel Sail)

## 데이터 모델
- **User**: 회원 정보 (일반/딜러/관리자)
- **Auction**: 경매 정보 (상태 관리 포함)
- **Bid**: 입찰 내역
- **Payment**: 결제 정보
- **Article/Comment**: 게시판 시스템
- **Media**: 파일 관리 (Spatie MediaLibrary)

## API 및 통합
- **인증**: Laravel Sanctum (API), PHP Session (웹)
- **권한**: Spatie Permission (역할 기반 접근 제어)
- **외부 API**: 나이스페이, 나이스DNR, 카머스, Aligo, 소셜로그인
- **파일 처리**: 이미지 리사이징, 문서 업로드

## 인프라 요구사항
- **서버**: PHP 8.2+, Nginx/Apache
- **큐 워커**: Laravel Queue (현재 sync, 운영은 database/redis 필요)
- **스케줄러**: Cron (매분/매시간/매일 작업)
- **스토리지**: 파일 업로드용 충분한 용량

# Development Roadmap
## Phase 1: 보안 취약점 수정 (즉시)
- Mass Assignment 취약점 수정 (User 모델 $fillable 설정)
- API 키 노출 문제 해결 (.env.example 정리)
- CSRF 보호 예외 최소화
- 하드코딩된 관리자 ID 환경변수화
- 로그인 orWhere 취약점 패치
- 파일 다운로드 권한 검증 강화

## Phase 2: 코드 안정화 (1주일)
- 에러 로그 분석 및 주요 버그 수정
- API 응답 형식 표준화
- 유효성 검사 규칙 강화
- 예외 처리 및 에러 메시지 개선
- 핵심 기능 테스트 코드 작성
- Queue 설정 변경 (sync → database/redis)

## Phase 3: 문서화 및 개선 (2주일)
- API 문서 작성 (Swagger/Postman)
- 코드 주석 및 PHPDoc 추가
- 배포 가이드 및 운영 매뉴얼 작성
- 성능 병목 지점 최적화
- 코드 리팩토링 (중복 제거, 구조 개선)
- 누락된 알림 기능 구현

## Phase 4: 기능 개선 (1개월)
- 사용자 경험 개선 (UI/UX 개선)
- 신규 기능 추가 (알림 설정, 통계 등)
- 모니터링 시스템 구축
- 백업 및 복구 시스템 구현
- 테스트 커버리지 확대

# Logical Dependency Chain
1. **보안 기반 구축**: Mass Assignment, API 키, CSRF 등 치명적 보안 이슈 우선 해결
2. **안정성 확보**: 버그 수정, 에러 처리, 기본 테스트로 시스템 안정화
3. **운영 가능 상태**: Queue, 스케줄러, 로깅 등 운영 필수 요소 정비
4. **품질 향상**: 문서화, 리팩토링, 성능 최적화로 유지보수성 개선
5. **기능 확장**: 안정된 기반 위에 신규 기능 및 개선사항 추가

# Risks and Mitigations
## 기술적 도전과제
- **리스크**: 인수인계 없이 복잡한 비즈니스 로직 파악 어려움
- **완화**: 철저한 코드 분석, 테스트 작성, 단계적 리팩토링

## 보안 취약점
- **리스크**: 이미 운영 중인 서비스의 보안 문제로 인한 사고
- **완화**: 즉시 치명적 취약점 패치, 단계적 보안 강화

## 운영 중단 위험
- **리스크**: 수정 작업 중 서비스 장애 발생 가능성
- **완화**: 충분한 테스트, 단계적 배포, 롤백 계획 수립

## 리소스 제약
- **리스크**: 혼자서 전체 시스템 개선 작업 진행의 어려움
- **완화**: 우선순위 명확화, 단계별 접근, 자동화 도구 활용

# Appendix
## 참고 문서
- CLAUDE.md: 프로젝트 현황 및 보안 이슈 상세
- ALL_FUNC_250704.md: 전체 기능 맵 및 프로세스 흐름
- Laravel 10 공식 문서
- Alpine.js 공식 문서

## 현재 파악된 주요 이슈
- User 모델 Mass Assignment 취약점
- .env.example 실제 API 키 노출
- CSRF 보호 예외 과다
- 관리자 ID 하드코딩 (User::find(2))
- 로그인 orWhere 취약점
- Queue sync 모드 사용
- 알림 기능 일부 누락
- 테스트 코드 부재
- 파일 권한 검증 미흡

## 외부 서비스 의존성
- 나이스페이먼츠 (결제)
- 나이스DNR (차량정보)
- 카머스 (시세정보)
- Aligo (SMS/알림톡)
- 카카오/네이버 (소셜로그인)
